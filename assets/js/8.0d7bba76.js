(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{338:function(e,t,n){"use strict";n.r(t);var o=n(33),r=Object(o.a)({},(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h3",{attrs:{id:"react"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#react"}},[e._v("#")]),e._v(" react")]),e._v(" "),n("ul",[n("li",[n("p",[e._v("构建用户js库")])]),e._v(" "),n("li",[n("p",[e._v("类组件：继承自React.Component")])]),e._v(" "),n("li",[n("p",[e._v("函数组件: 函数定义")])]),e._v(" "),n("li",[n("p",[e._v("prop/state: prop由父到子传递信息，state组件状态，记录组件内部状态变化，prop静态化，state动态化")])]),e._v(" "),n("li",[n("p",[e._v("组件通信：")]),e._v(" "),n("p",[e._v("prop/state;context.provide/context.consumer")])]),e._v(" "),n("li",[n("p",[e._v("组件渲染过程：")]),e._v(" "),n("p",[e._v("模板->ast->虚拟节点->真实dom")]),e._v(" "),n("p",[e._v("编译过程：将模板转换成对应React.createElement(tag, props, children)（词法，语法分析完成）")]),e._v(" "),n("p",[e._v("渲染过程：将虚拟节点转为真实节点。")]),e._v(" "),n("p",[e._v("通过虚拟节点类型以文本，元素，组件(类组件，函数组件)，文本与元素创建对应DOM节点，组件则进行类组件实例化\n调用render执行,并将对应的props,ref等传入render中给组件内部的内容；函数组件则执行并传入props,ref等\n执行后得到对应的子内容虚拟节点，并调用createDom创建真实节点，组件虚拟节点上记录对应的子内容虚拟节点，虚拟节点\n上记录真实节点；createDom过程完成更新属性(样式，class, 事件等)，渲染虚拟节点children孩子。")]),e._v(" "),n("p",[e._v("合成事件：在更新事件时候对元素进行绑定记录事件与事件监听器，并将事件绑定到document(16前)或者父节点，在建立\n事件代理过程中，对原始event进行复用创建单例保存，并监测target冒泡节点，从dom中获取到对应的事件和事件监听器\n执行监听器，并传入单例复用的event；")]),e._v(" "),n("p",[e._v("合成事件作用：减少dom节点的绑定；更好的浏览器兼容平台化；进行功能扩展化增加批量更新。")])]),e._v(" "),n("li",[n("p",[e._v("fiber引入")]),e._v(" "),n("p",[e._v("优化点：由于组件节点量大，导致大量内存占用，渲染过程卡顿，性能消耗严重；引入分片渲染节点，通过将每一个节点创建为\n一个fiber节点，将fiber节点引入到浏览器刷新频率针中，将渲染节点过程大量任务进行多任务分时进行，由于浏览器渲染为\n每秒60针，一针16.6ms，一针分为输入事件(keydown),定时器，onresize/onscroll事件，requestAnimation, 布局\n渲染，绘制，requestIdeCallback,我们将多余任务放入到requestIdeCallback中进行下一次渲染准备，提升渲染性能")])]),e._v(" "),n("li",[n("p",[e._v("批量更新")]),e._v(" "),n("p",[e._v("组件的更新建立在props,state变化引起；每一个组件对应一个更新器，更新器中存储多个state操作变更(对象/函数)，每\n一个更新器在事件开始前会被标识为非批量更新状态，这样就将记录到更新器队列中，在事件触发后将状态设置为更新，这样在\n状态未改变前操作的所有setState都会存储到对应更新器中，状态变化后批量执行；将执行后的结果更新到组件记录上，并\n再次调用组件render，比对新老虚拟节点，并更新真实DOM")])]),e._v(" "),n("li",[n("p",[e._v("生命周期")]),e._v(" "),n("p",[e._v("类组件存在生命周期函数，函数组件无生命周期；")]),e._v(" "),n("p",[e._v("类组件执行过程：class constructor -> init\ncomponentWillMount -> mount\nrender -> mount\ncomponentDidMount -> mount")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v("         props -> update\n         componentWillReceivePros\n    shouldComponentUpdate\n          true\n    componentWillUpdate\n          render\n     componentDidUpdate\n\n         state -> update\n    shouldComponentUpdate\n          true\n    componentWillUpdate\n          render\n     componentDidUpdate\n\n     componentWillUnMount -> unMount\n")])])])]),e._v(" "),n("li",[n("p",[e._v("ref, context.provide/context.consumer")])])])])}),[],!1,null,null,null);t.default=r.exports}}]);