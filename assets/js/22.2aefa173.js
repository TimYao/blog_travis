(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{349:function(n,s,p){"use strict";p.r(s);var e=p(33),a=Object(e.a)({},(function(){var n=this,s=n.$createElement,p=n._self._c||s;return p("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[p("h2",{attrs:{id:"介绍"}},[p("a",{staticClass:"header-anchor",attrs:{href:"#介绍"}},[n._v("#")]),n._v(" 介绍")]),n._v(" "),p("p",[n._v("npm: node包管理器")]),n._v(" "),p("p",[n._v("nrm: node资源管理器，管理多资源库之间灵活切换")]),n._v(" "),p("p",[n._v("nvm: node版本管理")]),n._v(" "),p("p",[n._v("cnpm: 内地提供的node包管理器")]),n._v(" "),p("p",[n._v("npm资源的切换可以通过")]),n._v(" "),p("div",{staticClass:"language- extra-class"},[p("pre",[p("code",[n._v("  npm config set registry https://registry.npm.taobao.org/\n")])])]),p("p",[n._v("nrm方式管理")]),n._v(" "),p("div",{staticClass:"language- extra-class"},[p("pre",[p("code",[n._v("  npm i -g nrm\n\n  查看了已有的资源库\n  nrm ls\n\n  当前正使用的资源库\n  nrm current\n\n  添加资源库\n  nrm add <registry> <url>\n\n  //比如添加自己公司的私有npm源，源地址：http://192.168.28.11:3000/repository/npm-public/,源名为：company(任意取名称，作为自己公司的私有npm源的名称\n\n  切换使用资源库\n  nrm use <registry>\n  nrm use taobao\n\n  删除资源库\n  nrm del <registry>\n\n  测试资源库响应时间\n  nrm test <registry>\n")])])]),p("p",[n._v("cnpm运用")]),n._v(" "),p("div",{staticClass:"language- extra-class"},[p("pre",[p("code",[n._v("  npm i -g cnpm\n\n  cnpm -v\n\n  cnpm config set registry <url>\n")])])]),p("h2",{attrs:{id:"npm知识点"}},[p("a",{staticClass:"header-anchor",attrs:{href:"#npm知识点"}},[n._v("#")]),n._v(" npm知识点")]),n._v(" "),p("p",[n._v("npm包方式是一种灵活的管理包方式，可以将各种模块功能独立话开发，通过服务管理这些包，需求方通过安装下载包以聚合入项目开发，这种方式是流行方式之一")]),n._v(" "),p("ul",[p("li",[p("p",[p("strong",[n._v("package.json")])]),n._v(" "),p("p",[n._v("对于记录包中的各种信息，例如版本version，名字name，命令bin，描述description，依赖包dependencies，开发依赖包devDependencies，脚本执行scripts")]),n._v(" "),p("p",[p("strong",[n._v("dependencies与devDependencies")])]),n._v(" "),p("div",{staticClass:"language- extra-class"},[p("pre",[p("code",[n._v("devDependencies开发模式下记录依赖包；\nnpm install -D xxxx\n\ndependencies生成环境下记录依赖包；\nnpm install -S xxxx\n")])])]),p("p",[p("strong",[n._v("bin")])]),n._v(" "),p("p",[n._v("指定了该包中提供的执行命令所映射的执行文件位置，当在全局安装时会在全局路径/usr/local/bin产生对应的命令链接；若项目下安装会产生./node_modules/bin产生对应的命令链接，在对应模式下的bin下产生配置的vm2文件，并最终执行对应的文件")]),n._v(" "),p("div",{staticClass:"language- extra-class"},[p("pre",[p("code",[n._v('"bin": {\n  "vm2": "./bin/vm2"\n}\n')])])]),p("p",[p("strong",[n._v("main")])]),n._v(" "),p("p",[n._v("包的入口模块文件，当需要通过require导入该包，此时对应映射的文件main指定的文件")])]),n._v(" "),p("li",[p("p",[p("strong",[n._v("npm <command>")])]),n._v(" "),p("ul",[p("li",[p("strong",[n._v("npm init")])])]),n._v(" "),p("p",[n._v("创建包中的package.json文件；创建方式有默认方式与自定义方式；自定义方式通过建立.npm-init.js文件，内部进行相关配置，并通过npm config set init-module .npm-init.js切换为自定义方式触发")]),n._v(" "),p("ul",[p("li",[p("strong",[n._v("2. npm scripts")])])]),n._v(" "),p("p",[n._v("scripts为指定包中运行的命令，在npm run test方式下，通过npm run启动了一个子shell来完成执行的脚本命令，也就是说，若命令对应为node test.js则当开启一个shell后，该命令会在shell中完成，因此任何可以在shell中执行的命令都可以在此定义；另外在全局模式下，模块安装在全局目录下/usr/local/lib/node_modules,将/usr/local/.bin加入到PATH下，当项目目录下./node_modules/.bin将会在script命令执行时加入到PATH中，执行结束后退出")]),n._v(" "),p("div",{staticClass:"language- extra-class"},[p("pre",[p("code",[n._v('"scripts": {\n  "test": "test.js"\n  "build": "tsc",\n}\n')])])]),p("p",[n._v("钩子生命周期npm 脚本有两个钩子，pre 和 post;当我们执行start脚本时候，start 的钩子就是 prestart 和 poststart,通过钩子有什么用，在实际开发中，我们可以做一些准备或者清理工作")]),n._v(" "),p("div",{staticClass:"language- extra-class"},[p("pre",[p("code",[n._v('"clean": "rimraf ./dist && mkdir dist",\n"prebuild": "npm run clean",\n"build": "cross-env NODE_ENV=production webpack"\n')])])]),p("p",[p("font",{attrs:{color:"#8C8C8C",size:"3"}},[n._v("注意：钩子好用，但是不可乱用，举个开发过程中遇到的坑，有一次想设置运行时的环境变量，当时想优雅一点，就在 prestart 里面设置了一个环境变量，但是在项目 start 的时候，无法拿到设置的环境变量，因为 script 的属性运行的时候都会新启动一个 shell，所以在 prestart中设置的环境变量只对应了那个shell的运行时")])],1)]),n._v(" "),p("li",[p("p",[p("strong",[n._v("env环境变量")])]),n._v(" "),p("p",[n._v("我们在执行 npm run 脚本时候, npm 会设置一些特殊的env环境变量。其中package.json中的所有字段，都会被设置为以npm_package_开头的环境变量。看个简单的例子")]),n._v(" "),p("div",{staticClass:"language- extra-class"},[p("pre",[p("code",[n._v('{\n  "name": "npm-demo",\n  "version": "1.0.0",\n  "script": {\n    "build": "webpack --mode=production"\n  },\n  "files": ["src"]\n}\n')])])]),p("p",[n._v("可以得到 npm_package_name、npm_package_version、npm_package_script_build、npm_package_files_0等变量。注意上面 package.json 中对象和数组中每个字段都会有对应的环境变量")]),n._v(" "),p("p",[n._v("同时，npm 相关的所有配置也会被设置为以npm_config_开头的环境变量。此外，还会设置一个比较特殊的环境变量npm_lifecycle_event，表示正在运行的脚本名称。比如执行npm run serve 的时候，process.env.npm_lifecycle_event值为serve，通过判断这个变量，可以将一个脚本使用在不同的npm scripts中。这里还要提一下上面说的钩子，npm_lifecycle_event可以和钩子配合使用，利用这个变量，在同一个脚本文件里面，为不同的 npm scripts 命令编写代码")]),n._v(" "),p("p",[p("font",{attrs:{color:"#8C8C8C",size:"3"}},[n._v('强调：这些环境变量只能在 npm run 的脚本执行环境内拿到，正常执行的 node 脚本是获取不到的。所以，不能直接通过 env $npm_package_name 的形式访问，但可以在 scripts 中定义脚本"scripts": {"bundle": "echo $npm_package_name"}来访问')])],1)]),n._v(" "),p("li",[p("p",[p("strong",[n._v("脚本中的参数")])]),n._v(" "),p("p",[n._v("node 处理 scripts 中的参数，除了属性后面的第一个命令，以空格分割的任何字符串(除特别shell语法)都是参数，并且都能通过 process.argv 属性访问")]),n._v(" "),p("p",[n._v("process.argv 属性返回一个数组，数组包含了启动 node 进程时的命令行参数。第一个元素为启动 node 进程的可执行文件的绝对路径名 process.execPath,第二个元素为当前执行的 jacascript 文件路径。剩余的元素为其他命令行参数")]),n._v(" "),p("div",{staticClass:"language- extra-class"},[p("pre",[p("code",[n._v('"scripts":{\n    "serve": "vue-cli-service serve --mode=dev --mobile -config build/example.js"\n}\n')])])]),p("p",[n._v("当我们执行 npm run server 命令的时候，process.argv 的具体内容为：")]),n._v(" "),p("div",{staticClass:"language- extra-class"},[p("pre",[p("code",[n._v("[ '/usr/local/Cellar/node/12.14.1/bin/node',\n'/Users/mac/Vue-projects/hao-cli/node_modules/.bin/vue-cli-service',\n'serve',\n'--mode=dev',\n'--mobile',\n'-config',\n'build/example.js']\n\nnpm run serve --params  // 参数params将转化成process.env.npm_config_params = true\nnpm run serve --params=123 // 参数params将转化成process.env.npm_config_params = 123\nnpm run serve -params  // 等同于--params参数\n\nnpm run serve -- --params  // 将--params参数添加到process.env.argv数组中\nnpm run serve params  // 将params参数添加到process.env.argv数组中\nnpm run serve -- params  // 将params参数添加到process.env.argv数组中\n")])])]),p("p",[n._v("对比下 npm install koa2 --save 是不是知道了bin脚本中接收到的 process.env.npm_config_save = true; 我想是这样的，有兴趣的小伙伴去看源码验证下。")]),n._v(" "),p("ul",[p("li",[p("p",[n._v("执行顺序")]),n._v(" "),p("p",[n._v("并行任务(同时的平行执行)，使用&符号")]),n._v(" "),p("div",{staticClass:"language- extra-class"},[p("pre",[p("code",[n._v("npm run script1.js & npm run script2.js\n")])])]),p("p",[n._v("串行任务(前一个任务成功，才执行下一个任务)，使用 && 符号")]),n._v(" "),p("div",{staticClass:"language- extra-class"},[p("pre",[p("code",[n._v("npm run script1.js && npm run script2.js\n")])])]),p("p",[n._v('我们配置的脚本命令，如 "start": "node test.js"，node test.js 会当做一行代码传递给系统的 shell 去解释执行。实际使用的 shell 可能会根据系统平台而不同，类 UNIX 系统里，如 macOS 或 linux 中指代的是 /bin/sh， 在 windows 中使用的是 cmd.exe。原理我们也看了，因为交给 shell 去解释执行的，说明配置的脚本可以是任意能够在 shell 中运行的命令，而不仅仅是 node 脚本或者 js 代码。如果你的系统里安装了 python（或者说系统变量 PATH里能找到 python 命令），你也可以将 scripts 配置为 "myscript": "python xxx.py"')])])])]),n._v(" "),p("li",[p("p",[p("strong",[n._v("npm 配置")])]),n._v(" "),p("p",[n._v("npm config")]),n._v(" "),p("p",[n._v("npm cli 提供了 npm config 命令进行 npm 相关配置，通过 npm config ls -l 可查看 npm 的所有配置，包括默认配置。npm 文档页为每个配置项提供了详细的说明 https://docs.npmjs.com/misc/config .修改配置的命令为 npm config set, 我们使用相关的常见重要配置:")]),n._v(" "),p("p",[n._v("• proxy, https-proxy: 指定 npm 使用的代理")]),n._v(" "),p("p",[n._v("• registry 指定 npm 下载安装包时的源，默认为 https://registry.npmjs.org/ 可以指定为私有 Registry 源")]),n._v(" "),p("p",[n._v("• package-lock 指定是否默认生成 package-lock 文件，建议保持默认 true")]),n._v(" "),p("p",[n._v("• save true/false 指定是否在 npm install 后保存包为 dependencies, npm 5 起默认为 true")]),n._v(" "),p("p",[n._v("删除指定的配置项命令为 npm config delete <key>.")]),n._v(" "),p("div",{staticClass:"language- extra-class"},[p("pre",[p("code",[n._v("设置淘宝镜像\nnpm config set registry https://registry.npm.taobao.org\n\n恢复使用之前的 npm\nnpm config set registry https://registry.npmjs.org\n")])])]),p("p",[n._v("如果env环境变量中存在以npm_config_为前缀的环境变量，则会被识别为npm的配置属性。比如在env环境变量中设置npm_config_package_lock变量:")]),n._v(" "),p("div",{staticClass:"language- extra-class"},[p("pre",[p("code",[n._v("export npm_config_package_lock=false //修改的是内存中的变量，只对当前终端有效\n")])])]),p("p",[n._v("这时候执行npm install，npm会从环境变量中读取到这个配置项，从而不会生成package-lock.json文件。")])]),n._v(" "),p("li",[p("p",[p("strong",[n._v("npmrc 文件")])]),n._v(" "),p("p",[n._v("除了使用 CLI 的 npm config 命令显示更改 npm 配置，还可以通过 npmrc 文件直接修改配置。")]),n._v(" "),p("p",[n._v("这样的 npmrc 文件优先级由高到低包括：")]),n._v(" "),p("p",[n._v("• 工程内配置文件: /path/to/my/project/.npmrc")]),n._v(" "),p("p",[n._v("• 用户级配置文件: ~/.npmrc")]),n._v(" "),p("p",[n._v("• 全局配置文件: $PREFIX/etc/npmrc (即npm config get globalconfig 输出的路径)")]),n._v(" "),p("p",[n._v("• npm内置配置文件:/path/to/npm/npmrc")])])]),n._v(" "),p("p",[n._v("很多时候我们在公司内网需要通过代理才能访问npm源，通过这个机制，我们可以方便地在工程跟目录创建一个 .npmrc 文件来共享需要在团队间共享的 npm 运行相关配置。比如如果我们在公司内网环境下需通过代理才可访问 registry.npmjs.org 源，或需访问内网的 registry, 就可以在工作项目下新增 .npmrc 文件并提交代码库。")]),n._v(" "),p("div",{staticClass:"language- extra-class"},[p("pre",[p("code",[n._v("  proxy = http://proxy.example.com/\n\n  https-proxy = http://proxy.example.com/\n\n  registry = http://registry.example.com/\n")])])]),p("ul",[p("li",[p("p",[p("strong",[n._v("npm 包发布")])]),n._v(" "),p("p",[n._v("规范的 npm 模块目录\n一个 node.js 模块是基于 CommonJS 模块化规范实现的，严格按照 CommonJS 规范，模块目录下除了必须包含包描述文件 package.json 以外，还需要包含以下目录：")]),n._v(" "),p("p",[n._v("• bin：存放可执行二进制文件的目录")]),n._v(" "),p("p",[n._v("• lib：存放js代码的目录")]),n._v(" "),p("p",[n._v("• doc：存放文档的目录")]),n._v(" "),p("p",[n._v("• test：存放单元测试用例代码的目录")]),n._v(" "),p("p",[n._v("如何发布自己的 npm 包")]),n._v(" "),p("p",[n._v("先去 npm 注册个账号，然后在命令行使用")]),n._v(" "),p("div",{staticClass:"language- extra-class"},[p("pre",[p("code",[n._v("npm adduser #根据提示输入用户名密码即可\n")])])]),p("p",[n._v("使用命令发布你的包")]),n._v(" "),p("p",[p("font",{attrs:{color:"#8C8C8C",size:"3"}},[n._v("在推送之前，可以通过配置一个 .npmignore 文件来排除一些文件, 防止大量的垃圾文件推送到 npm, 规则上和你用的 .gitignore 是一样的。.gitignore 文件也可以充当 .npmignore 文件")])],1),n._v(" "),p("div",{staticClass:"language- extra-class"},[p("pre",[p("code",[n._v("npm publish\n")])])]),p("p",[n._v("发布成功之后，你就可以像下载安装其他包一样使用你自己的开发工具了")]),n._v(" "),p("div",{staticClass:"language- extra-class"},[p("pre",[p("code",[n._v("npm install koalanpmstudy\n")])])])]),n._v(" "),p("li",[p("p",[p("strong",[n._v("关于 npm 包的更新")])]),n._v(" "),p("p",[n._v("更新 npm 包也是使用 npm publish 命令发布，不过必须更改 npm 包的版本号，即 package.json 的 version 字段，否则会报错，同时我们应该遵 Semver(语义化版本号) 规范，npm 提供了 npm version 给我们升级版本")]),n._v(" "),p("div",{staticClass:"language- extra-class"},[p("pre",[p("code",[n._v("# 升级补丁版本号\n$ npm version patch\n\n# 升级小版本号\n$ npm version minor\n\n# 升级大版本号\n$ npm version major\n")])])])]),n._v(" "),p("li",[p("p",[p("strong",[n._v("本地开发的 npm 包如何调试")])]),n._v(" "),p("p",[n._v("在本地开发的模块包的时候，可以使用 npm link 调试，将模块链接到对应的运行项目中去，方便地对模块进行调试和测试。具体使用步骤如下\n• 假如我的项目是 koalaNpmStudy，假如我的 npm 模块包名称是 npm-ikoala")]),n._v(" "),p("p",[n._v("• 进入到 模块包 npm-ikoala 目录中，执行 npm link")]),n._v(" "),p("p",[n._v("• 在自己的项目 koalaNpmStudy 中创建连接执行 npm link npm-ikoala")]),n._v(" "),p("p",[n._v("• 在自己项目的 node_module 中会看到链接过来的模块包，然后就可以像使用其他的模块包一样使用它了。")]),n._v(" "),p("p",[n._v("• 调试结束后可以使用 npm unlink 取消关联")]),n._v(" "),p("font",{attrs:{color:"#8C8C8C",size:"3"}},[n._v("\nnpm link 主要做了两件事：\n1. 为目标 npm 模块创建软链接，将其链接到全局 node 模块安装路径 /usr/local/lib/node_modules/。\n2. 为目标 npm 模块的可执行 bin 文件创建软链接，将其链接到全局 node 命令安装路径 /usr/local/bin/。\n")]),n._v(" "),p("p",[n._v("npx出现  --- 命令行开发方式")]),n._v(" "),p("p",[n._v("npm 从5.2版开始，增加了 npx 命令，react-native也在0.61版本文档中推荐使用npx来创建项目。")]),n._v(" "),p("p",[n._v("npx的作用：")]),n._v(" "),p("p",[n._v("• 运行的时候，会到node_modules/.bin路径和环境变量$PATH里面，检查命令是否存在。")]),n._v(" "),p("p",[n._v("• npx 还能避免全局安装的模块，npx 将包下载到一个临时目录，使用以后再删除。比如我们想启动一个web服务，只需在根目录下npx http-server。")]),n._v(" "),p("p",[n._v("• 可以指定某个版本的 Node 运行脚本。某些场景下，这个方法用来切换 Node 版本，要比 nvm 那样的版本管理器方便一些。")]),n._v(" "),p("p",[n._v("• npx 还可以执行 GitHub 上面的模块源码。")])],1)]),n._v(" "),p("h2",{attrs:{id:"npm私服搭建"}},[p("a",{staticClass:"header-anchor",attrs:{href:"#npm私服搭建"}},[n._v("#")]),n._v(" npm私服搭建")]),n._v(" "),p("ul",[p("li",[p("p",[n._v("verdaccio")]),n._v(" "),p("p",[n._v("verdaccio是nodejs 创建的轻量的私有npm proxy registry，froked于sinopia@1.4.0 ,是一个开源的npm私有库的搭建工具，可以搭建一套属于自己公司的npm仓库。")]),n._v(" "),p("p",[n._v("与yarn 、npm 和pnmp  100%兼容\n提供的Docker和Kubernetes支持，很容易安装和使用\n发布的包是私有和配置访问权限\nverdaccio是需要缓存所有相关项，并且在本地或者私有网络下可以加速安装")]),n._v(" "),p("p",[n._v("npm私有库只针对公司内部局域网开放，不对外部公开，具有一定的保密性")]),n._v(" "),p("p",[n._v("速度比在直接在npm下载更快，甚至是比淘宝源更快。因为毕竟是在公司局域网")]),n._v(" "),p("p",[n._v("对于发布和下载npm包配置权限管理")]),n._v(" "),p("p",[n._v("私有库能够将包资源进行缓存，响应的话会加快下载速度")]),n._v(" "),p("div",{staticClass:"language- extra-class"},[p("pre",[p("code",[n._v("//npm下载\nnpm install -g verdaccio\n\n//yarn下载  用yarn下载的时候 verdaccio运行不起来的时候请换成npm下载\nyarn global add verdaccio\n\n//或者nrm切换下源地址  要是报权限错误的话，请选择cmd<以管理员身份运行>在输入一次\n//或者在cmd输入下面的命令：\nnpm install -g verdaccio --unsafe-perm\n//--unsafe-perm添加上是为了防止报 gyp ERR! permission denied 的权限问题\n\n//下载完成后会有红色字体表示：表示没有python的环境，这个时候不需要理会。\n\n//在cmd输入：verdaccio 执行\n\npm2方式管理\n\nnpm i -g pm2\n\npm2 start verdaccio\n")])])]),p("p",[n._v("访问http://localhost:4873")]),n._v(" "),p("p",[n._v("config.yaml文件配置信息：https://verdaccio.org/docs/en/configuration")]),n._v(" "),p("p",[n._v("添加私服到nrm管理")]),n._v(" "),p("div",{staticClass:"language- extra-class"},[p("pre",[p("code",[n._v("nrm add verdaccio http://localhost:4873\n\nnrm use verdaccio\n")])])]),p("p",[n._v("构建包发布")]),n._v(" "),p("div",{staticClass:"language- extra-class"},[p("pre",[p("code",[n._v("npm addUser\n\nnpm login\n\nnpm publish\n")])])])]),n._v(" "),p("li",[p("p",[n._v("cnpm")]),n._v(" "),p("p",[n._v("阿里提供的一个搭建私服环境服务")]),n._v(" "),p("ol",[p("li",[p("p",[n._v("克隆")]),n._v(" "),p("p",[n._v("git clone https://github.com/cnpm/cnpmjs.org.git")]),n._v(" "),p("p",[n._v("//安装项目依赖   cd cnpmjs.org\nnpm install")])]),n._v(" "),p("li",[p("p",[n._v("修改配置 （config/index.js）")])])]),n._v(" "),p("p",[n._v("主要配置运用数据库选择(mysql, sqlite), 私服相关对外访问口，上拉地址等")]),n._v(" "),p("ol",{attrs:{start:"3"}},[p("li",[n._v("安装数据库")])]),n._v(" "),p("p",[n._v("默认为sqlite, 我选择了mysql;")]),n._v(" "),p("div",{staticClass:"language- extra-class"},[p("pre",[p("code",[n._v("  登录数据库\n\n  mysql -u root -p 123456\n\n  创建数据库，这里的数据库名字要和config/index.js中统一\n\n  create database cnpm_test\n\n  切换到cnpm_test数据库\n  use cnpm_test;\n\n  导入cnpm.org中的docs/db.sql生成数据表;目录在cnpm.org目录下\n\n  source ./docs/db.sql\n\n  查看导入数据表\n\n  show tables;\n")])])]),p("ol",{attrs:{start:"4"}},[p("li",[p("p",[n._v("启动访问服务")]),n._v(" "),p("div",{staticClass:"language- extra-class"},[p("pre",[p("code",[n._v(" cd cnpm.org && node dispatch.js\n\n 访问http://127.0.0.1:7002 为私服服务查询站点\n\n 访问http://127.0.0.1:7001 为私服地址，私服上传地址\n")])])])])]),n._v(" "),p("p",[n._v("完成搭建展示")]),n._v(" "),p("p",[p("img",{attrs:{src:"/blog/images/pub-success.jpg",alt:"An image"}})]),n._v(" "),p("p",[p("img",{attrs:{src:"/blog/images/cnpm1.jpg",alt:"An image"}})]),n._v(" "),p("p",[p("img",{attrs:{src:"/blog/images/cnpm2.jpg",alt:"An image"}})]),n._v(" "),p("p",[p("img",{attrs:{src:"/blog/images/cnpm3.jpg",alt:"An image"}})]),n._v(" "),p("p",[p("img",{attrs:{src:"/blog/images/data1.jpg",alt:"An image"}})]),n._v(" "),p("p",[p("img",{attrs:{src:"/blog/images/data2.jpg",alt:"An image"}})])])])])}),[],!1,null,null,null);s.default=a.exports}}]);